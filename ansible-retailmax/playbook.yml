---
- name: Deploy RetailMax Monolith App
  hosts: app
  become: true

  vars:
    image_name: adityatomar25/retailmax-monolith
    container_name: retailmax
    host_port: 3001
    container_port: 3000
    email_recipient: adityatomar0025@gmail.com
    docker_network: retailmax-net

  tasks:
    - name: Install pip3
      apt:
        name: python3-pip
        state: present
      become: true

    - name: Install Docker SDK for Python
      pip:
        name: docker
        executable: pip3
      become: true

    - name: Create Docker network
      docker_network:
        name: "{{ docker_network }}"
        state: present

    - name: Stop and remove existing container (if any)
      shell: |
        docker stop {{ container_name }} || true
        docker rm {{ container_name }} || true

    - name: Tag currently running container image as backup (if running)
      shell: |
        docker commit {{ container_name }} {{ image_name }}:backup || true

    - name: Pull latest Docker image from DockerHub
      shell: docker pull {{ image_name }}:latest

    

    - name: Run RetailMax container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:latest"
        state: started
        restart_policy: always
        published_ports:
          - "{{ host_port }}:{{ container_port }}"
        networks:
          - name: "{{ docker_network }}"
      register: run_output
      ignore_errors: yes

    - name: Rollback to backup image if latest deployment failed
      when: run_output is failed
      block:
        - name: Remove failed container (if any)
          shell: docker rm -f {{ container_name }} || true

        - name: Start backup container
          shell: |
            docker run -d --name {{ container_name }} \
            -p {{ host_port }}:{{ container_port }} \
            {{ image_name }}:backup

        - name: Send email notification for rollback
          shell: |
            echo "Rollback triggered on {{ inventory_hostname }}: backup image started due to deployment failure." | mail -s "RetailMax Rollback Triggered" {{ email_recipient }}

    - name: Send success email notification
      when: run_output.rc == 0
      shell: |
        echo "RetailMax deployed successfully on {{ inventory_hostname }} using {{ image_name }}:latest" | mail -s "RetailMax Deployment Success" {{ email_recipient }}

    # Prometheus and Grafana Setup
    - name: Ensure Prometheus config folder exists
      file:
        path: /opt/prometheus
        state: directory

    - name: Copy Prometheus config
      copy:
        dest: /opt/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'retailmax'
              static_configs:
                - targets: ['{{ container_name }}:{{ container_port }}']

    - name: Run Prometheus container
      docker_container:
        name: prometheus
        image: prom/prometheus
        state: started
        restart_policy: always
        published_ports:
          - "9090:9090"
        volumes:
          - /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
          - name: "{{ docker_network }}"

    - name: Run Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana
        state: started
        restart_policy: always
        published_ports:
          - "3002:3000"
        networks:
          - name: "{{ docker_network }}"